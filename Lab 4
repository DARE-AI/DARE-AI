# -*- coding: utf-8 -*-
"""Adversarial Images deceiving ML model
Dataset: ImageNet 

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lFoqt36sQljoLzIPX217xavOG-U0pK7t

# Lab 7: Adversarial manipulation of AI/ML Algorithms
###  Using multi Pixel Attack to recreate Adversarial example using MobileNet CNN model pretrained on ImageNet.

### Learning Objectives
* Learn to load and preprocess images for model prediction.  
* Learn how to change a pixel in the image by adding color noise to it. 
* Learn to import and use a pre-trained model from Keras and make predictions on the model.

### Imports
Import all the required libraries including tensorflow, numpy, keras and matplotlib.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from keras.applications.mobilenet import preprocess_input, decode_predictions
import matplotlib.pyplot as plt
# %matplotlib inline

"""### Download the image from the source
Use the function download_from_url to download the source image so that it can be used as an input in MobileNet.
"""

import requests

def download_from_url(url, dst):
    r = requests.get(url, stream=True)
    with open(dst, 'wb') as f:
        for data in r.iter_content():
            f.write(data)

"""### Image URL from ImageNet
The variable url and filename consist of ImageNet image and the respective filename. Let's use a sample image of a bison from ImageNet and preprocess the image inorder to be able to use in MobileNet model.
"""

url = 'https://farm1.static.flickr.com/64/212732558_f712a1c817.jpg'
filename = 'Chihuahuato.jpg'

"""### Download the image from ImageNet
Use the given image url and filename to download the image.
"""

download_from_url(url, filename)

from IPython.display import Image
Image(filename='bison.jpg', width=300,height=200)

"""### Load Image
Load and convert the image to numpy array for preprocessing.
"""

def prepare_image(file):
    x, y = 224, 224 #height, widthc
    img = load_img(file, target_size=(x,y)) #returns PIL image
    img_array = img_to_array(img)
    img_array_expanded_dims = np.expand_dims(img_array, axis=0)
    return img_array_expanded_dims

image = prepare_image(filename) #Prepare the image for the model

"""### Plot Image
Use the function plot_image to plot the given image.
"""

def plot_image(image, label_true=None, class_names=None, label_pred=None):
    image = image[0]
    plt.imshow(image.astype(np.uint8))

    plt.xticks([])  # Remove ticks from the plot
    plt.yticks([])

plot_image(image)

"""### Load pretrained Model
Import MobileNet from Keras which returns Keras Image classification model which is pretrained using Imagenet. 
"""

pretrained_model = tf.keras.applications.mobilenet.MobileNet()

"""### Preprocess the image input
Use the function preprocess_input to preprocess the image so that it can be used as an input in MobileNet. Use the pretrained_model for prediction and test the given image in the model.
"""

preprocessed_image = preprocess_input(image.copy()) #preprocess using the preprocess_input library
predictions = pretrained_model.predict(preprocessed_image) #Get the predicted probabilities for each class
label = decode_predictions(predictions, top=5) #Convert the probabilities to class labels 
label

"""### Distort pixel in an image
Use the function perturb_image to add noise to the pixel in the image to see how accurately the trained model predicts on the perturbed image. 
"""

def perturb_image(xs, img):
    x_pos, y_pos, *rgb = xs
    img[0][x_pos, y_pos] = rgb
    return img

"""## SECTION I 
### One Pixel Attack

### Create One Pixel Perturbed Image
Use the numpy array to perturb the images by one pixel and plot the image.
"""

pixel = np.array([16, 16, 255, 255, 0]) # pixel = x,y,r,g,b
image_perturbed = perturb_image(pixel, image)
plot_image(image_perturbed)

"""### Make predictions on perturbed image
Preprocess the perturbed image and make prediction using the pretrained MobileNet model on the perturbed image.
"""

preprocessed_perturbed = preprocess_input(image_perturbed.copy())
predictions = pretrained_model.predict(preprocessed_perturbed)
label = decode_predictions(predictions, top=5)
label

"""## SECTION II
### Multi pixels Attack

### Create Quarter Pixel Perturbed Image
Use the for loop to perturb the images by quarter of the pixels and plot the image.
"""

import random 
image_perturbed = image.copy()

count = 0 
x = y = 224
ipos = set()
jpos = set()
i = random.randrange(0, x)
j = random.randrange(0, y)

while count < x//4:
  pixel = np.array([i, j, 255, 255, 0])
  image_perturbed = perturb_image(pixel, image_perturbed)
  ipos.add(i)
  jpos.add(j)
  while i in ipos:
    i = random.randrange(0, x)
  while j in jpos:
    j = random.randrange(0, y)
  count += 1

plot_image(image_perturbed)

"""### Make predictions on Quarter pixel perturbed image
Preprocess the perturbed image and make prediction using the pretrained MobileNet model on the perturbed image.
"""

preprocessed_perturbed = preprocess_input(image_perturbed.copy())
predictions = pretrained_model.predict(preprocessed_perturbed)
label = decode_predictions(predictions, top=5)
label

"""## SECTION III
### All Pixels Attack

### Create Fully Pixel Perturbed Image
Use the for loop to perturb the images by all the pixels and plot the image.
"""

image_perturbed = image.copy()
for i in range(0, 224):
  for j in range(0, 224):
    pixel = np.array([i, j, 255, 255, 0]) # pixel = x,y,r,g,b
    image_perturbed = perturb_image(pixel, image_perturbed)
plot_image(image_perturbed)

"""### Make predictions on all pixel perturbed image
Preprocess the perturbed image and make prediction using the pretrained MobileNet model on the perturbed image.
"""

preprocessed_perturbed = preprocess_input(image_perturbed.copy())
predictions = pretrained_model.predict(preprocessed_perturbed)
label = decode_predictions(predictions, top=5)
label

"""**Compare the classification results for different kind of pixel attacks demonstrated in the lab. [5 points]**

**Use Image(not from ImageNet) for the experiment and compare the results. [5 points]**
"""
